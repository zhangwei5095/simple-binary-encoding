/*
 * Copyright 2014 - 2016 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

defaultTasks 'clean', 'build', 'shadowJar', 'install'

def sbeGroup = 'uk.co.real-logic'
def sbeVersion = new File('version.txt').text.trim()

group = sbeGroup
version = sbeVersion
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext {
    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'sbe'
    packaging = 'pom'
    description = 'FIX/SBE - OSI layer 6 presentation for encoding and decoding application messages' +
        ' in binary format for low-latency applications'
    url = 'https://github.com/real-logic/simple-binary-encoding'

    scm {
        connection = 'scm:git:github.com/real-logic/simple-binary-encoding.git'
        developerConnection = 'scm:git:github.com/real-logic/simple-binary-encoding.git'
        url = 'github.com/real-logic/simple-binary-encoding.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'tmontgomery'
            name = 'Todd L. Montgomery'
            email = 'tmont@nard.net'
            url = 'https://github.com/tmontgomery'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
        developer {
            id = 'odeheurles'
            name = 'Olivier Deheurles'
            email = 'olivier@weareadaptive.com'
            url = 'https://github.com/odeheurles'
        }
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

configurations {
    shadow
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'eclipse'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = sbeGroup
    version = sbeVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2"
        }
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:7.0'
        checkstyle 'com.github.sevntu.checkstyle:sevntu-checks:1.21.0'

        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'com.google.code.gson:gson:2.3.1'
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle.xml')
        toolVersion = '7.0'
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    tasks.withType(JavaCompile) {
        // Suppress warnings about using Unsafe and sun.misc
        options.compilerArgs << '-XDignore.symbol.file' << '-Xlint:unchecked'
        options.debug = true
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.warnings = false
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    javadoc {
        title = '<h1>Simple Binary Encoding</h1>'
        options.bottom = '<i>Copyright &#169; 2014 - 2016 Real Logic Ltd. All Rights Reserved.</i>'
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
        sign configurations.shadow
    }

    install {
        repositories.mavenInstaller.pom.project(projectPom)
    }
}

def validationXsdPath = project(':sbe-tool').projectDir.toString() + '/src/main/resources/fpl/sbe.xsd'

project(':sbe-tool') {
    dependencies {
        compile 'org.agrona:Agrona:0.5.4'

        testCompile files('build/classes/generated')
    }

    jar {
        manifest.attributes('Main-Class': 'uk.co.real_logic.sbe.SbeTool')
    }

    sourceSets {
        generated.java.srcDir 'build/generated'
    }

    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

    compileTestJava {
        dependsOn 'compileGeneratedJava'
    }

    task(generateCodecs, dependsOn: 'compileJava', type:JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties(
            'sbe.output.dir': 'build/generated',
            'sbe.target.language': 'Java',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath)
        args = ['src/test/resources/json-printer-test-schema.xml', 'src/test/resources/composite-elements-schema.xml']
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':sbe-all') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':sbe-tool')
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from project(':sbe-tool').sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from project(':sbe-tool').javadoc.destinationDir
    }

    shadowJar {
        classifier = ''
        manifest.attributes('Main-Class': 'uk.co.real_logic.sbe.SbeTool')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    uploadShadow {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }

        mustRunAfter 'uploadArchives'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':sbe-samples') {
    dependencies {
        compile project(':sbe-tool')

        compile files('build/classes/generated')
    }

    sourceSets {
        generated.java.srcDir 'build/generated'
    }

    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += project(':sbe-all').sourceSets.main.runtimeClasspath

    compileJava {
        dependsOn 'compileGeneratedJava'
    }

    task(generateCodecs, type:JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = project(':sbe-all').sourceSets.main.runtimeClasspath
        systemProperties(
            'sbe.output.dir': 'build/generated',
            'sbe.target.language': 'Java',
            'sbe.java.generate.interfaces': 'false',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath)
        args = ['src/main/resources/example-schema.xml', 'src/main/resources/example-extension-schema.xml']
    }

    task(runExampleUsingGeneratedStub, dependsOn: 'compileJava', type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStub'
    }

    task(runExampleUsingGeneratedStubExtension, dependsOn: 'compileJava', type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'uk.co.real_logic.sbe.examples.ExampleUsingGeneratedStubExtension'
    }

    task(runOtfExample, dependsOn: 'compileJava', type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'uk.co.real_logic.sbe.examples.OtfExample'
    }

    task runJavaExamples {
        dependsOn 'runExampleUsingGeneratedStub', 'runExampleUsingGeneratedStubExtension', 'runOtfExample'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':sbe-benchmarks') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':sbe-tool')
        compile 'org.openjdk.jmh:jmh-core:1.14'
        compile 'org.openjdk.jmh:jmh-generator-annprocess:1.14'
        compile files('build/classes/generated')
    }

    sourceSets {
        generated.java.srcDir 'build/generated'
    }

    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += project(':sbe-all').sourceSets.main.runtimeClasspath

    compileJava {
        dependsOn 'compileGeneratedJava'
    }

    task(generateCodecs, type:JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = project(':sbe-all').sourceSets.main.runtimeClasspath
        systemProperties(
            'sbe.output.dir': 'build/generated',
            'sbe.target.language': 'Java',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath,
            'sbe.java.encoding.buffer.type': 'org.agrona.concurrent.UnsafeBuffer',
            'sbe.java.decoding.buffer.type': 'org.agrona.concurrent.UnsafeBuffer')
        args = ['src/main/resources/car.xml', 'src/main/resources/fix-message-samples.xml']
    }

    shadowJar {
        archiveName = 'sbe-benchmarks.jar'
        classifier = 'benchmarks'
        manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project(projectPom)
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task(generateJavaIrCodecs, type: JavaExec) {
    main = 'uk.co.real_logic.sbe.SbeTool'
    classpath = project(':sbe-all').sourceSets.main.runtimeClasspath
    systemProperties(
        'sbe.output.dir': 'sbe-tool/src/main/java',
        'sbe.target.language': 'Java',
        'sbe.validation.xsd': validationXsdPath)
    args = ['sbe-tool/src/main/resources/sbe-ir.xml']
}

task(generateCppIrCodecs, type: JavaExec) {
    main = 'uk.co.real_logic.sbe.SbeTool'
    classpath = project(':sbe-all').sourceSets.main.runtimeClasspath
    systemProperties(
        'sbe.output.dir': 'sbe-tool/src/main/cpp',
        'sbe.target.language': 'cpp',
        'sbe.validation.xsd': validationXsdPath)
    args = ['sbe-tool/src/main/resources/sbe-ir.xml']
}

task generateIrCodecs {
    description = 'Generate Java and C++ IR Codecs'
    dependsOn 'generateJavaIrCodecs', 'generateCppIrCodecs'
}

task runBenchmarks(type: Exec) {
    commandLine 'java',
        '-Dagrona.disable.bounds.checks=true',
        '-jar', 'sbe-benchmarks/build/libs/sbe-benchmarks.jar',
        '-wi', '3', '-i', '5', '-tu', 'ns', '-f', '5'
}

task uploadToMavenCentral {
    dependsOn 'sbe-tool:uploadArchives', 'sbe-samples:uploadArchives', 'sbe-benchmarks:uploadArchives',
            'sbe-all:uploadArchives', 'sbe-all:uploadShadow'
}